<?php
/**
 * Copyright Dansk Bibliotekscenter a/s. Licensed under GNU GPL v3
 * See license text at https://opensource.dbc.dk/licenses/gpl-3.0
 */

/*
 * @file matchLibV3_class.php
 * @brief as input a xml from Publizon - output those records witch match in Basis and Phus
 *
 * @author Hans-Henrik Lund
 *
 * @date 18-09-2014
 */

$startdir = dirname(__FILE__);
$inclnk = $startdir . "/../";

require_once "$inclnk/OLS_class_lib/verbose_class.php";
require_once "GetMarcFromBasis_class.php";
//require_once 'mark_best_records.php';
require_once "$inclnk/OLS_class_lib/marc_class.php";
require_once "$inclnk/OLS_class_lib/material_id_class.php";

//require_once "$inclnk/OLS_class_lib/LibV3API_class.php";

class matchLibV3 {

    private $getMarcFromBasis;
    private $doc;
    private $xmldata;

    function __construct($ociuser, $ocipasswd, $ocihost) {

        $pwuids = posix_getpwuid(posix_getuid());
        $workdir = "/tmp/PafWorkDir." . $pwuids['name'];
        verbose::log(TRACE, "workdir:$workdir");

        $this->doc = new DOMDocument();
        $this->getMarcFromBasis = new GetMarcFromBasis($workdir, $ociuser, $ocipasswd, $ocihost);
//        $this->getMarcFromBasis->phuscredintials('sephus', 'sephus', 'dora11.dbc.dk');
        $this->marc = new marc();


//        $this->libV3Api = new LibV3API($ociuser, $ocipasswd, $ocihost);
    }

    function getIsbnFromF21($marc) {
        $isbns = array();
        $f21s = $marc->findSubFields('f21', 'a');
        foreach ($f21s as $f21) {
            $path_parts = pathinfo($f21);
            $isbns[] = trim(basename($f21, $path_parts['extension']), '.');
        }
        return $isbns;
    }

    function mark_best_records($getMarcFromBasis, $Identifier, $candidates) {

        $startscore = 100;
        if (!$candidates) {
            return $candidates;
        }
//select base, lokalid, bibliotek, type, matchtype
        $return = array();
        for ($i = 0; $i < count($candidates); $i++) {
            $score = $candidates[$i]['matchtype'] * $startscore;
            $base = $candidates[$i]['base'];
            $lokalid = $candidates[$i]['lokalid'];
            $bibliotek = $candidates[$i]['bibliotek'];
//        $libv3->set('withAuthor');
//        $libv3->set('hbs');
            $getMarcFromBasis->setDataBase($base);
            $records = $getMarcFromBasis->getMarcByLokalidBibliotek($lokalid, $bibliotek);

            $fname = "data/" . str_replace(' ', '', $lokalid) . ".$bibliotek";
            if ($records) {
                $strng = "";
                $marc = new marc();
                $cnt = 0;
                $j = 0;
                foreach ($records as $record) {
                    $rec = $record['DATA'];

                    $marc->fromIso($rec);

                    $strng .= utf8_encode($marc->toLineFormat());
                    if ($j != $cnt) {
                        $strng .="------------------\n";
                    }
                    $j++;
                }
//            $fp = fopen($fname, "w");
//            fwrite($fp, $strng);
//            fclose($fp);

                foreach ($records as $record) {

                    $marc->fromIso($record['DATA']);

                    $isbns = $this->getIsbnFromF21($marc);


                    $f009gs = $marc->findSubFields('009', 'g');
                    if ($f009gs[0] == 'xe') {
                        $score += 16;
                    }
                    $f032xs = $marc->findSubFields('032', 'x');
                    $ere = $ebi = $ebo = false;
                    foreach ($f032xs as $f032x) {
                        $code = substr($f032x, 0, 3);
                        if ($code == 'ERE') {
                            $ere = true;
                        }
                        if ($code == 'EBI') {
                            $ebi = true;
                        }
                        if ($code == 'EBO') {
                            $ebo = true;
                        }
                    }
                    if ($ere) {
                        $score += 8;
                    } else {
                        if ($ebi) {
                            $score += 4;
                        } else {
                            if ($ebo) {
                                $score += 2;
                            }
                        }
                    }
                    foreach ($isbns as $isbn) {
                        if ($Identifier == $isbn) {
                            $score += 1;
                            break;
                        }
                    }
                }
                $candidates[$i]['score'] = $score;
//            $return[] = $candidates[$i];
            }
        }
        $more = true;
        while ($more) {
            $more = false;
            $highscore = -1;
            $best = -1;
            for ($i = 0; $i < count($candidates); $i++) {
                if ($candidates[$i]['score'] > 0) {
                    $more = true;
                    if ($candidates[$i]['score'] > $highscore) {
                        $best = $i;
                        $highscore = $candidates[$i]['score'];
                    }
                }
            }
            if ($more) {
                $return[] = $candidates[$best];
                $candidates[$best]['score'] = -1;
            }
        }
        return $return;
    }

    function mergemarc($marcarr) {
        $isomarc = $marcarr['DATA'];
        if (!array_key_exists('hsb', $marcarr)) {
            return $isomarc;
        }
        $marc = new marc();
        $n = new marc();
        $marc->fromIso($isomarc);
        foreach ($marcarr['hsb'] as $marchb) {
            $n->fromIso($marchb['DATA']);
//            $xx = $n->findFields('245');
//            $marc->insert($xx[0]);
//            $xx = $n->findFields('100');
//            $marc->insert($xx[0]);
//            $xx = $n->findFields('260');
//            $marc->insert($xx[0]);
//            $xx = $n->findFields('700');
//            $marc->insert($xx[0]);
//
            $marc->insert($n->findFields('245'));
            $marc->insert($n->findFields('100'));
            $marc->insert($n->findFields('260'));
            $marc->insert($n->findFields('700'));
            $strng = $marc->toLineFormat();
        }
        $data = $marc->toIso();
        return $data;
    }

    /*
     * Takes a xml record from Pulison API an test it up against
     * Basis and Phus
     * @param string $xml
     * @return array of faust
     */

    function match($xml) {
        $this->doc->loadXML($xml);
        $title = $this->getData('Title');
        $isbn13 = $this->getData('Identifier');
        $this->prepare();
        $mMarc = array();
        $records = array();
//        echo "title:$title-$isbn13\n";
        //try to find marc by title
        if (count($mMarc) == 0) {
            $ccltitles = $this->makeTitleSearchString();
            $found = false;
            foreach ($ccltitles as $ccltitle) {
                verbose::log(DEBUG, "ccltitle:$ccltitle");
                $records = $this->fetchRecords($ccltitle, $records);
                foreach ($records as $base => $marcs) {
                    if ($marcs) {
//                        echo "Found-title $base\n";
                        foreach ($marcs as $marc) {
                            $marcrec = $this->mergemarc($marc);
                            $pid = $this->compare($marcrec);
                            if ($pid) {
                                $lokalid = $pid[0];
                                $bib = $pid[1];
                                $matchType = $pid[2];
                                $mMarc[$lokalid][$bib][$base]['type'] = 'title';
                                $mMarc[$lokalid][$bib][$base]['matchtype'] = $matchType;
                                $found = true;
                            }
                        }
                    }
                }
//                if ($found)
//                    break;
            }
        }

        // try to find marc by author
        if (count($mMarc) == 0) {
            $cclauthor = $this->makeAuthorSearchString();
            $records = $this->fetchRecords($cclauthor, $records);
            foreach ($records as $base => $marcs) {
                if ($marcs) {
//                    echo "Found-author $base\n";
                    foreach ($marcs as $marc) {
                        $pid = $this->compare($marc['DATA']);
                        if ($pid) {
                            $lokalid = $pid[0];
                            $bib = $pid[1];
                            $matchType = $pid[2];
                            $mMarc[$lokalid][$bib][$base]['type'] = 'author';
                            $mMarc[$lokalid][$bib][$base]['matchtype'] = $matchType;
                        }
                    }
                }
            }
        }

        // try to find marc by isbn13
        if (count($mMarc) == 0) {
            $records = $this->fetchRecords($isbn13, $records);
            foreach ($records as $base => $marcs) {
                if ($marcs) {
//                    echo "Found-isbn $base\n";
                    foreach ($marcs as $marc) {
                        $pid = $this->compare($marc['DATA']);
                        if ($pid) {
                            $lokalid = $pid[0];
                            $bib = $pid[1];
                            $matchType = $pid[2];
                            $mMarc[$lokalid][$bib][$base]['type'] = 'isbn13';
                            $mMarc[$lokalid][$bib][$base]['matchtype'] = $matchType;
                        }
                    }
                }
            }
        }
//        $candidates = array();
        foreach ($mMarc as $lokalid => $arr2) {
            foreach ($arr2 as $bib => $arr3) {
                foreach ($arr3 as $base => $arr4) {
                    $arr = array();
                    $arr['lokalid'] = $lokalid;
                    $arr['bibliotek'] = $bib;
                    $arr['base'] = $base;
                    $arr['matchtype'] = $arr4['matchtype'];
                    $arr['type'] = $arr4['type'];
                    $candidates = array();
                    $candidates[] = $arr;
                    $number = $this->mark_best_records($this->getMarcFromBasis, $isbn13, $candidates);
                    $mMarc[$lokalid][$bib][$base]['matchtype'] = $number[0]['score'];
                }
            }
        }
//        $number = $this->mark_best_records($this->getMarcFromBasis, $isbn13, $candidates);

        return $mMarc;
    }

    private function fetchRecords($search, $records) {
        $noDublets = true;
        $hsb = true;
        $this->getMarcFromBasis->setDatabase('Basis');
        $records['Basis'] = $this->getMarcFromBasis->getMarc($search, $noDublets, $hsb);
//        $this->getMarcFromBasis->setDatabase('Phus');
//        $records['Phus'] = $this->getMarcFromBasis->getMarc($search);
        return $records;
    }

    private function insertWithNoDubs($titles, $title, $expchar) {
        $arr = explode($expchar, $title);
        foreach ($arr as $ti) {
//            $ti = str_replace("og", "'og'", $ti);
//            $ti = str_replace("elle", "'eller'", $ti);
//            $ti = str_replace("ikke", "'ikke'", $ti);
//            $ti = str_replace("og", "'og'", $ti);
            if (!array_key_exists($ti, $titles)) {
                $titles[$ti] = 'y';
            }
        }
        return $titles;
    }

    private function InsertOg($txt) {
        $placholder = chr(5);
        $ret = "";
        $isint = false;
        $laengde = strlen($txt);
        for ($i = 0; $i < strlen($txt); $i++) {
            $chr = $txt[$i];
            if ($isint) {
                if (!is_numeric($chr)) {
                    $ret .= $placholder;
                    $isint = false;
                }
            }
            if (is_numeric($chr)) {
                if (!$isint) {
                    $isint = true;
                    if ($i > 1) {
                        $ret .= $placholder;
                    }
                }
            }
            $ret .= $chr;
        }
        $ret = rtrim($ret, $placholder);
        $ret = str_replace($placholder, ' og ', $ret);

        return $ret;
    }

    private function makeTitleSearchString() {
        $title = $this->getData('Title');
        $title = str_replace('½', ' 1 2 ', $title);
        $title = str_replace('"', '', $title);
        $title = utf8_decode($title);
        $title = str_replace('?', '', $title);
        $stitle = $this->InsertOg($title);
        $title = "LTI=\"" . $title . "\"?";
        $titles = array();
        $titles[$title] = 'y';
        $titles = $this->insertWithNoDubs($titles, $stitle, ',');
        $titles = $this->insertWithNoDubs($titles, $stitle, ':');
        $titles = $this->insertWithNoDubs($titles, $stitle, '/');
        $titles = $this->insertWithNoDubs($titles, $stitle, '-');

        $newtitles = array();
        foreach ($titles as $key => $value) {
            $newtitles[] = $key;
//            $newtitles[] = "LTI=\"" . $key . "?\"";
        }
        return $newtitles;
    }

    private function makeAuthorSearchString() {
        $placholder = chr(5);
        $authors = str_replace(',', '', utf8_decode($this->getData('Authors')));

//        $authors = str_replace(',', '', $this->getData('Authors'));
        verbose::log(DEBUG, $authors);
        $names = explode(' ', $authors);
        $cclauthors = "";
        foreach ($names as $name) {
            $newname = $this->Aa2amstrongA($name);
            if ($newname != $name) {
                $name = "($newname eller $name) ";
            }
            $cclauthors .= "fo=" . $name . $placholder;
        }
        $ret = rtrim($cclauthors, $placholder);
        $ret = str_replace($placholder, ' og ', $ret);
        return $ret;
    }

    private function Aa2amstrongA($txt) {
        $cnvfrom = array("aa", "Aa");
        $aa = utf8_decode('å');
        $txt = str_replace($cnvfrom, $aa, $txt);
        return $txt;
    }

    private function convertChars($txt) {
        $aa = utf8_decode('å');
        $Aa = utf8_decode('Å');
        $cnvFrom = array("@$Aa", "@$aa");
        $cnvTo = array('Aa', 'aa');
        $txt = str_replace($cnvFrom, $cnvTo, $txt);
        return $txt;
    }

    private function getData($name) {
        $elements = $this->doc->getElementsByTagName($name);
        $txt = "";
        foreach ($elements as $element) {
            $txt .= $element->nodeValue . "\n";
        }
        return rtrim($txt);
    }

    private function prepare() {
        $arr['Title'] = str_replace('½', '1/2', $this->getData('Title'));
        $Authors = $this->getData('Authors') . ', ';
        $Authors .= $this->getData('EditedBy');
        $arr['Authors'] = rtrim($Authors, ', ');
        $imprints = $this->getData('ImprintName') . "\n";
        $imprints .= $this->getData('PublisherName');
        $arr['ImprintName'] = trim($imprints, "\n");

        $this->xmldata = $arr;
    }

    private function extractAuthor($marc, $field, $authors) {
        while ($marc->thisField($field)) {
            $author = "";
            while ($marc->thisSubfield('h')) {
                $author .= $marc->subfield() . ' ';
            }
            while ($marc->thisSubfield('a')) {
                $author .= $marc->subfield() . ' ';
            }
            if (trim($author)) {
                $authors[] = $this->convertChars($author);
            }
        }
        return $authors;
    }

    private function fetchAuthorsFromAutReg($marc, $field, $authors) {
        while ($this->marc->thisField($field)) {
            while ($this->marc->thisSubfield('5')) {
                $bibliotek = $this->marc->subfield();
            }
            while ($this->marc->thisSubfield('6')) {
                $lokalid = $this->marc->subfield();
            }

            if ($bibliotek && $lokalid) {

//                $autMarcs = $this->libV3Api->getMarcByLokalidBibliotek($lokalid, $bib);
                $this->getMarcFromBasis->setDatabase('Basis');
                $autmMarcs = $this->getMarcFromBasis->getMarcByLokalidBibliotek($lokalid, $bibliotek);
                $autmarc = new marc();
                $autmarc->fromIso($autMarcs[0]['DATA']);
//                $lns = $autmarc->toLineFormat();
//                echo "aut post\n$lns\n";
                $authors = $this->extractAuthor($autmarc, '100', $authors);
                $authors = $this->extractAuthor($autmarc, '400', $authors);
            }
        }
        return $authors;
    }

    private function fetchTitleFromMarc() {
        $f245a = $this->marc->findSubFields('245', 'a');
        $f745a = $this->marc->findSubFields('745', 'a');
        $f440a = $this->marc->findSubFields('440', 'a');
        $f512t = $this->marc->findSubFields('512', 't');
        $mtitles = array_merge($f245a, $f745a, $f440a, $f512t);
        return $mtitles;
    }

    private function fetchAuthorsFromMarc() {
        $authors = array();
        $authors = $this->extractAuthor($this->marc, '100', $authors);
        $authors = $this->extractAuthor($this->marc, '700', $authors);
        $authors = $this->fetchAuthorsFromAutReg($this->marc, '100', $authors);
        $authors = $this->fetchAuthorsFromAutReg($this->marc, '700', $authors);
        return $authors;
    }

    private function compare($marc) {
        $match = false;
        $this->marc->fromIso($marc);
        $faust = $this->marc->findSubFields('001', 'a');
        $bib = $this->marc->findSubFields('001', 'b');
        if ($bib[0] != '870970') {
            return false;
        }
        $lns = $this->marc->toLineFormat();
        verbose::log(DEBUG, "Marc: \n$lns\n");
        $mtitles = $this->fetchTitleFromMarc();

        $ptitles = explode("\n", $this->xmldata['Title']);
        $loose = true;

        $matchType = 0;
        foreach ($mtitles as $mtitle) {
            $mtitle = $this->convertChars($mtitle);
            foreach ($ptitles as $ptitle) {
                verbose::log(DEBUG, "\$mtitle: $mtitle, ptitle:$ptitle\n");
                $res = $this->marc->FuzzyCompare($mtitle, $ptitle, $loose);
                if ($res) {
                    $match = true;
                    $matchType = 1;
                    break;
                }
            }
        }


        if ($match) {
            // is there at least one author in common?
            $match = false;
            $loose = true;
            $authors = $this->fetchAuthorsFromMarc();
            $pauthors = explode(',', $this->xmldata['Authors']);
            foreach ($authors as $author) {
                if (!$match) {
                    foreach ($pauthors as $pauthor) {
                        verbose::log(DEBUG, "pauthor: $pauthor, author:$author\n");
                        $res = $this->marc->FuzzyCompare($author, $pauthor, $loose);
                        if ($res) {
                            $match = true;
                            $matchType = 2;
                            break;
                        }
                    }
                }
            }
        }
        if ($match) {
            $match = false;
            $loose = true;
            $mpublishers = $this->marc->findSubFields('260', 'b');
            $ppublishers = explode("\n", $this->xmldata['ImprintName']);
            foreach ($mpublishers as $mpublisher) {
                $mpublisher = $this->convertChars($mpublisher);
                foreach ($ppublishers as $ppublisher) {
                    verbose::log(DEBUG, "\$mpublisher: $mpublisher, ppublisher:$ppublisher\n");
                    $res = $this->marc->FuzzyCompare($mpublisher, $ppublisher, $loose);
                    if ($res) {
                        $match = true;
                        $matchType = 3;
                        break;
                    }
                }
            }
        }
        verbose::log(DEBUG, "matchLib>V3::matchType:$matchType");
        if ($matchType > 0)
            return array($faust[0], $bib[0], $matchType);
        else
            return false;
    }

}
